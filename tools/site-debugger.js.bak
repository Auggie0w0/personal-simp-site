/**
 * Site Debugger and Optimizer
 * This script checks for common issues and optimizes the site
 */

const fs = require('fs');
const path = require('path');

// Configuration
const config = {
    inputDir: '..',
    charactersDir: '../characters',
    assetsDir: '../assets',
    verbose: true
};

// Main function
async function debugAndOptimize() {
    console.log('🔍 Starting site debug and optimization...');
    
    // Find all character HTML files
    const files = fs.readdirSync('.');
    config.characterPages = files.filter(file => 
        file.endsWith('.html') && 
        !file.startsWith('_') && 
        !file.includes('test-') &&
        !file.includes('reset-') &&
        !file.includes('clear-') &&
        !file.includes('template') &&
        !['index.html', 'reviews.html', 'character-list.html', 'abouts.html', 'admin.html', 'character-template.html', 'footer_disclaimer_template.html'].includes(file)
    );
    
    console.log(`Found ${config.characterPages.length} character pages`);
    
    // Find all character JSON files
    if (fs.existsSync('characters')) {
        const jsonFiles = fs.readdirSync('characters');
        config.characterJsonFiles = jsonFiles.filter(file => file.endsWith('.json'));
        console.log(`Found ${config.characterJsonFiles.length} character JSON files`);
    }
    
    // Run checks
    await checkCharacterConsistency();
    await checkBrokenLinks();
    await checkImageLinks();
    await checkReviewsConsistency();
    await optimizeSite();
    
    // Summary
    if (config.issuesFound === 0) {
        console.log('✅ No issues found! The site is well-structured and optimized.');
    } else {
        console.log(`⚠️ Found ${config.issuesFound} issues that need attention.`);
    }
}

// Check character consistency between HTML and JSON files
async function checkCharacterConsistency() {
    console.log('\n🔄 Checking character consistency...');
    
    // Check for HTML pages without JSON
    const jsonIds = config.characterJsonFiles.map(file => path.basename(file, '.json'));
    const htmlIds = config.characterPages.map(file => path.basename(file, '.html'));
    
    const htmlWithoutJson = htmlIds.filter(id => !jsonIds.includes(id));
    if (htmlWithoutJson.length > 0) {
        config.issuesFound += htmlWithoutJson.length;
        console.log(`⚠️ Found ${htmlWithoutJson.length} character pages without JSON files:`);
        htmlWithoutJson.forEach(id => {
            console.log(`   - ${id}.html (consider creating ${id}.json)`);
        });
    }
    
    // Check for JSON without HTML
    const jsonWithoutHtml = jsonIds.filter(id => !htmlIds.includes(id));
    if (jsonWithoutHtml.length > 0) {
        config.issuesFound += jsonWithoutHtml.length;
        console.log(`⚠️ Found ${jsonWithoutHtml.length} JSON files without character pages:`);
        jsonWithoutHtml.forEach(id => {
            console.log(`   - ${id}.json (run generator to create ${id}.html)`);
        });
    }
}

// Check for broken links in HTML files
async function checkBrokenLinks() {
    console.log('\n🔗 Checking for broken links...');
    
    const allHtmlFiles = [
        'index.html', 
        'character-list.html', 
        'reviews.html', 
        'abouts.html',
        ...config.characterPages
    ];
    
    let brokenLinks = 0;
    
    for (const file of allHtmlFiles) {
        if (!fs.existsSync(file)) continue;
        
        const content = fs.readFileSync(file, 'utf8');
        const hrefMatches = content.match(/href="([^"]+)"/g) || [];
        
        for (const hrefMatch of hrefMatches) {
            const href = hrefMatch.replace(/href="([^"]+)"/, '$1');
            
            // Skip external links and anchors
            if (href.startsWith('http') || href.startsWith('#') || href.startsWith('mailto:')) {
                continue;
            }
            
            // Check if the linked file exists
            if (!fs.existsSync(href)) {
                brokenLinks++;
                console.log(`